1. Service worker vs web worker.
================================


	a) Service Worker
	=================
	A service worker is an event-driven worker registered against an origin and a path. It takes the form of a JavaScript file that can control the web-page/site that it is associated with, intercepting and modifying navigation and resource requests, and caching resources in a very granular fashion to give you complete control over how your app behaves in certain situations (the most obvious one being when the network is not available).

	A service worker is run in a worker context: it therefore has no DOM access, and runs on a different thread to the main JavaScript that powers your app, so it is not blocking. It is designed to be fully async; as a consequence, APIs such as synchronous XHR and localStorage can't be used inside a service worker.

	Service workers only run over HTTPS, for security reasons. Having modified network requests, wide open to man in the middle attacks would be really bad. In Firefox, Service Worker APIs are also hidden and cannot be used when the user is in private browsing mode.
	
	https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
	
	
	b)Web worker
	=================
	A worker is an object created using a constructor (e.g. Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread; workers run in another global context that is different from the current window. Thus, using the window shortcut to get the current global scope (instead of self) within a Worker will return an error.

	The worker context is represented by a DedicatedWorkerGlobalScope object in the case of dedicated workers (standard workers that are utilized by a single script; shared workers use SharedWorkerGlobalScope). A dedicated worker is only accessible from the script that first spawned it, whereas shared workers can be accessed from multiple scripts.

	You can run whatever code you like inside the worker thread, with some exceptions. For example, you can't directly manipulate the DOM from inside a worker, or use some default methods and properties of the window object. But you can use a large number of items available under window, including WebSockets, and data storage mechanisms like IndexedDB and the Firefox OS-only Data Store API. See Functions and classes available to workers for more details.

	Data is sent between workers and the main thread via a system of messages — both sides send their messages using the postMessage() method, and respond to messages via the onmessage event handler (the message is contained within the Message event's data attribute.) The data is copied rather than shared.

	Workers may, in turn, spawn new workers, as long as those workers are hosted within the same origin as the parent page. In addition, workers may use XMLHttpRequest for network I/O, with the exception that the responseXML and channel attributes on XMLHttpRequest always return null.
	https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers
	https://www.youtube.com/watch?v=HcSqj1apNHI
	
	
	c) Web workers vs Service workers
	===============================
	
	Web Workers[1]:

	Web Workers is a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa.)

	Example Usage: Browser extensions and HTML5 games

	Service Workers[2]:

	Service workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.

	Example Usage: Progressive Web Apps
		

################################





2. Deprecated HTML tags
================================
################################

Tag         - Description           - alternative
=======================================================================
<center>	|	centers elements 	|	<div style="text-align:center"> 

<menu>		|	menu list 			|	<ul>

<font>		|	applies font styles	|   font style sheets

<basefont>	|	sets font styles	| font style sheets


3. Script Async vs Script Defer
================================
################################

a) <script> Execution:
	1. HTML Code executes
	2. After getting to the script tag:
		rest of HTML document execution is blocked
	3. Script is fetched
	4. Script is executed
	5. HTML document execution is continued 
	
b) <script async>
	1. HTML Code executes
	2. After getting to the script tag:
		DOM document is NOT blocked
	2a. At the same time while rest of dom document is getting executed, script is getting fetched.
	3. HTML execution is blocked and script gets executed.
	4. Once script gets executed - Rest of HTML document code gets executed
	
c) <script defer>
	1. HTML Code executes
	2. After getting to the script tag:
		DOM document is NOT blocked
	3. HTML document gets executed.
	4. ONCE HTML document got executed, the script starts


	If used async and defer, async takes precedence on modern browsers. Defer will be the fallback for older browsers.
https://flaviocopes.com/javascript-async-defer/


4. web socket API vs REST API?
================================
################################

	a) HTTP Rest
	==========
		1. Client sends request to server.
		2. Server recies the request
		3. Server sends response
		4. Connection close
		
		4. Next connection cycle from 1..4
		
	- For each requests client needs to send a request and open a connection.
	- Puts higher pressure on server when needs to do multiple requestes
	- Better when client does a request gets information and is passive for a longer period of time
	-Used with static websites
	
	Instagram API, google maps api etc.
	More interesting APIs:
	https://www.programmableweb.com/apis
	
	b) Web sockets
	=============
		1. Client sends request to server
		2. Server response
		3. Connection is established 
		
	-Good for low latency operations.
	- Does put less of pressure on the server
	- Used with chats, games etc
	
	- We can create it by new WebSocket(url)



5. Prevent cross site scripting XSS
================================
################################
Exploiting the fact that browser will start running the tag when it encounters it.
For example <script> alert('hey').
There are two types perisant and not persitant XSS attas

Preventing by:
- Escape dynamic content
SDL - Security Development Lifecycle- assume every data comming from user is not secure
Use correct meta tag:
<META http-equiv="Content-Type" content="text/html; charset= ISO-8859-1">
-Whitelist/restrict some data from getting entered




6. Aria? HTML attributes? Used in Bootstrap
================================
################################





7. IFFE - when we use it?
================================
################################





8. New features in ES2019 - slak, slakmap, start trim
================================
################################





9. Specificty calculator
================================
################################

